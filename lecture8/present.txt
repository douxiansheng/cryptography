function Shift(l)
   n := #l;
   res := [l[i]: i in [1..n-1]];
   return  [l[n]] cat res;
end function;

function PRESENTAddRoundKey(Si,Ki)
	 res := [];
	 for i in [0..#Si] do
	     res := Append(res, GF(2) ! Si[i] + Ki[i]);
	 end for;
	 return ElementToSequence(res);
end function;

function PRESENTsBoxLayer(S)
	 bricks := [];
	 values := [];
	 res := [];
	 box := [12,5,6,11,9,0,10,13,3,14,15,8,4,7,1,2];
	 for i in [0..15] do
	     bricks[i+1] := [S[4*i+1]] cat [S[4*i+2]] cat [S[4*i+3]] cat [S[4*i+4]];
	     val := box[SequenceToInteger(bricks[i+1], 2) +1];
	     res := Append(res, Intseq(val, 2));
	 end for;
	 return res;
end function;

function PRESENTpLayer(S)
	 Si := [];
	 for i in [0..15] do 
	     Si[4*i+1] := S[i+1];
	     Si[4*i+2] := S[i+17];
	     Si[4*i+3] := S[i+33];
	     Si[4*i+4] := S[i+49];
	 end for;
	 return  Si;
end function;

function PRESENTKeySchedule(Kr)
    	 schedule := [];
    	 Ki := [Kr[i]: i in [1..64]];
    	 schedule := Append(schedule, Ki);
    	 
    	 for j in [2..32] do
    	 	 for i in [1..61] do
    		      Kr := Shift(Kr);
    	 	 end for;
    
    		 proc := [Kr[i]: i in [1..4]];
    		 box := [12,5,6,11,9,0,10,13,3,14,15,8,4,7,1,2];
		 val := box[SequenceToInteger(proc, 2) +1];
    	 	 proc := Intseq(val, 2);
    	 	 Kr[1] := proc[1];
    	 	 Kr[2] := proc[2];
    	 	 Kr[3] := proc[3];
    	 	 Kr[4] := proc[4];
    		 
		 tmp := [Kr[i] : i in [61..64]];
		 counter := Reverse(Intseq(j,2));
		 Kr[61] := GF(2) ! proc[1] + counter[1];
    	 	 Kr[62] := GF(2) ! proc[2] + counter[2];
    	 	 Kr[63] := GF(2) ! proc[3] + counter[3];
    	 	 Kr[64] := GF(2) ! proc[4] + counter[4];

		 Ki := [Kr[i]: i in [1..64]];
    	 	 schedule := Append(schedule, Ki);
    	 end for;
	 return  schedule;
end function;

function PRESENT(M,Kr)

	 sched := PRESENTKeySchedule(Kr);
	 for i in [1..31] do 
	     M := PRESENTAddRoundKey(M,sched[i]);
	     M := PRESENTsBoxLayer(M);
	     M := PRESENTpLayer(M);
	 end for;
	 M := PRESENTAddRoundKey(M,32);
	 
	 return M;
end function;
