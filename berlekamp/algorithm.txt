function FindFactors(H,f,i, bound, mult, Fq, F)
	 L := [];
	 if (i le bound) then
	 for el in Fq do
	     g := Gcd(f, F ! H[i]-el);
	     if (g ne 1) then
	     	L := L cat FindFactors(H, g, i+1, bound, mult, Fq, F);
	     end if;
	 end for;
	 end if;
	 if (L eq []) then
	    L := [<f,mult>];
	 end if;
	 return L;
end function;

function Berlekamp(f, mult, Fq, F, q)
    	ide := ideal<F|f>;
	Q<x> := quo<F|ide>;
	n := Degree(f);
	H := [];
	S := [];	
     	for i in [0..n-1] do
    	     tmp := x^(i*q);
    	     degtmp := Degree(tmp);
    	     seq := Coefficients(tmp) cat [0 : j in [1..(n-1)-degtmp]];
    	     S := Append(S,seq);
	 end for;

	 B := Matrix(Fq,n,n,S);
	 I := IdentityMatrix(Fq, n);
     	 BmI := B - I;

       	 basis := Basis(Kernel(BmI));
      	 bound := #basis - 1;
      	 for base in basis do
    	     poly<x> := Polynomial(F, ElementToSequence(base));
	     if (Degree(poly) ne 0) then
       	     	H := Append(H, poly);
    	     end if;
   	 end for;
	 res := FindFactors(H, f,1, bound, mult, Fq, F);
	 return res;
end function;

function algoritmoBerlekamp(q,f)
	 Fq<a> := GF(q);
	 F<x> := PolynomialRing(Fq);
	 f := f div LeadingCoefficient(f);
	 factors := [];
	 p := Characteristic(Fq);
	 derf := Derivative(f);
	 d := Gcd(f,derf);
	 mult := 1;

	 while d ne 1 do
      	       if (d eq f) then
      	       	  while (derf eq 0) do
	       	  	f := Root(f, p);
	 	 	derf := Derivative(f);
	 	 	d := Gcd(f,derf);
		 	mult *:= p;
 	 	  end while;
      	       elif (d gt 1) then
      	       factors := factors cat Berlekamp(f div d, mult, Fq, F, q);
	       f := d;
	       derf := Derivative(f);
	       d := Gcd(f,derf);
      	       end if;
	 end while;

	 if d eq 1 then
   	    factors := factors cat Berlekamp(f, mult, Fq, F, q);
	 end if;

	 tmp := {<p[1], &+[p1[2] :p1 in factors | p[1] eq p1[1]]> : p in factors};

	 factors := Sort(SetToSequence(tmp));
         return factors;
end function;










